
-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE SCHEMA IF NOT EXISTS census;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- we need this for using uuid_generate_v4()

CREATE TABLE IF NOT EXISTS census."Person"
(
    person_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    person_name BYTEA NOT NULL, -- VARCHAR(255)
    person_birth_date BYTEA NOT NULL, -- DATE
    person_birth_place BYTEA NOT NULL, -- VARCHAR(50)
    person_phone BYTEA NOT NULL, -- VARCHAR(20)
    person_email BYTEA NOT NULL, -- VARCHAR(100)
    person_password TEXT NOT NULL,
    person_uni_email BYTEA, -- VARCHAR(100)
    person_status VARCHAR(30),
    person_is_email_verified BOOLEAN NOT NULL DEFAULT false,
    person_last_student_status_verified BYTEA, -- DATE
    person_zipcode BYTEA NOT NULL, -- VARCHAR(10)
    person_street BYTEA NOT NULL, -- VARCHAR(50)
    person_street_number BYTEA NOT NULL, -- VARCHAR(5)
    person_city_id UUID,
    person_branch_id UUID,
    CONSTRAINT person_id PRIMARY KEY (person_id)
);

ALTER TABLE IF EXISTS census."Person"
    ENABLE ROW LEVEL SECURITY;

CREATE TABLE IF NOT EXISTS census."City"
(
    city_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    city_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (city_id)
);

CREATE TABLE IF NOT EXISTS census."Branch"
(
    branch_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    branch_name VARCHAR(50) NOT NULL,
    branch_email VARCHAR(100) NOT NULL,
    branch_leader_id UUID NOT NULL,
    branch_phone VARCHAR(50) NOT NULL,
    branch_website VARCHAR(50),
    branch_facebook_page VARCHAR(100),
    branch_instagram VARCHAR(50),
    branch_twitter VARCHAR(50),
    PRIMARY KEY (branch_id)
);

CREATE TABLE IF NOT EXISTS census."Education"
(
    education_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    education_start_date DATE NOT NULL,
    education_end_date DATE DEFAULT NULL,
    education_person_id UUID NOT NULL,
    education_degree_id UUID NOT NULL,
    education_major_id UUID NOT NULL,
    education_institution_id UUID NOT NULL,
    PRIMARY KEY (education_id)
);

CREATE TABLE IF NOT EXISTS census."Major"
(
    major_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    major_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (major_id)
);

CREATE TABLE IF NOT EXISTS census."Degree"
(
    degree_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    degree_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (degree_id)
);

CREATE TABLE IF NOT EXISTS census."Institution"
(
    institution_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    institution_name VARCHAR(50) NOT NULL,
    institution_phone VARCHAR(20),
    institution_email VARCHAR(50),
    institution_zipcode VARCHAR(10),
    institution_street VARCHAR(50),
    institution_street_number VARCHAR(5),
    institution_city_id UUID,
    PRIMARY KEY (institution_id)
);

CREATE TABLE IF NOT EXISTS census."Skill"
(
    skill_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    skill_name VARCHAR(50) NOT NULL,
    skill_person_id UUID NOT NULL,
    skill_is_available BOOLEAN NOT NULL,
    skill_category_id UUID NOT NULL,
    PRIMARY KEY (skill_id)
);

CREATE TABLE IF NOT EXISTS census."Experience"
(
    experience_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    experience_person_id UUID NOT NULL,
    experience_name VARCHAR(255) NOT NULL,
    experience_type_id uuid NOT NULL,
    experience_category_id uuid NOT NULL,
    experience_is_international BOOLEAN NOT NULL,
    experience_start_date DATE NOT NULL,
    experience_end_date DATE,
    PRIMARY KEY (experience_id)
);

CREATE TABLE IF NOT EXISTS census."Application"
(
    application_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    application_secret_key character varying(50) NOT NULL,
    application_owner_id uuid NOT NULL,
    application_name VARCHAR(50) NOT NULL,
    application_description character varying(255) NOT NULL,
    application_creation_date DATE NOT NULL,
    PRIMARY KEY (application_id)
);

CREATE TABLE IF NOT EXISTS census."Role_Person_Map"
(
    role_id uuid NOT NULL,
    person_id uuid NOT NULL
);

CREATE TABLE IF NOT EXISTS census."Category"
(
    category_id uuid NOT NULL,
    category_name character varying(50) NOT NULL,
    PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS census."Experience_Type"
(
    experience_type_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    experience_type_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (experience_type_id)
);

CREATE TABLE IF NOT EXISTS census."Privilege_Application_Map"
(
    privilege_id UUID NOT NULL,
    application_id UUID NOT NULL
);

CREATE TABLE IF NOT EXISTS census."Role"
(
    role_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    role_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS census."Privilege_Role_Map"
(
    privilege_id UUID NOT NULL,
    role_id UUID NOT NULL
);

CREATE TABLE IF NOT EXISTS census."Privilege"
(
    privilege_id UUID NOT NULL DEFAULT uuid_generate_v4(),
    privilege_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (privilege_id)
);

CREATE TABLE IF NOT EXISTS census."Access_Token"
(
    access_token VARCHAR(64) NOT NULL,
    access_token_application_id UUID NOT NULL,
    access_token_expiration_time time without time zone NOT NULL,
    PRIMARY KEY (access_token)
);

CREATE TABLE IF NOT EXISTS census."Refresh_Token"
(
    refresh_token VARCHAR(64) NOT NULL,
    refresh_token_application_id UUID NOT NULL,
    refresh_token_expiration_time time without time zone NOT NULL,
    PRIMARY KEY (refresh_token)
);

CREATE TABLE IF NOT EXISTS census."Funding"
(
    funding_id UUID NOT NULL,
    funding_type VARCHAR(50) NOT NULL,
    funding_institution VARCHAR(255) NOT NULL,
    funding_education_id UUID NOT NULL,
    PRIMARY KEY (funding_id)
);

ALTER TABLE IF EXISTS census."Person"
    ADD FOREIGN KEY (person_city_id)
        REFERENCES census."City" (city_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE SET NULL;

ALTER TABLE IF EXISTS census."Person"
    ADD FOREIGN KEY (person_branch_id)
        REFERENCES census."Branch" (branch_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE SET NULL;

ALTER TABLE IF EXISTS census."Branch"
    ADD FOREIGN KEY (branch_leader_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT; -- We cannot allow a user to be deleted if still a leader

ALTER TABLE IF EXISTS census."Education"
    ADD FOREIGN KEY (education_person_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Education"
    ADD FOREIGN KEY (education_degree_id)
        REFERENCES census."Degree" (degree_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT;

ALTER TABLE IF EXISTS census."Education"
    ADD FOREIGN KEY (education_major_id)
        REFERENCES census."Major" (major_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT;

ALTER TABLE IF EXISTS census."Education"
    ADD FOREIGN KEY (education_institution_id)
        REFERENCES census."Institution" (institution_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT;

ALTER TABLE IF EXISTS census."Funding"
    ADD FOREIGN KEY (funding_education_id)
        REFERENCES census."Education" (education_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Education"
    ADD FOREIGN KEY (education_person_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Institution"
    ADD FOREIGN KEY (institution_city_id)
        REFERENCES census."City" (city_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE SET NULL;

ALTER TABLE IF EXISTS census."Skill"
    ADD FOREIGN KEY (skill_category_id)
        REFERENCES census."Category" (category_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT;

ALTER TABLE IF EXISTS census."Skill"
    ADD FOREIGN KEY (skill_person_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Experience"
    ADD FOREIGN KEY (experience_category_id)
        REFERENCES census."Category" (category_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT;

ALTER TABLE IF EXISTS census."Experience"
    ADD FOREIGN KEY (experience_type_id)
        REFERENCES census."Experience_Type" (experience_type_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE RESTRICT;

ALTER TABLE IF EXISTS census."Experience"
    ADD FOREIGN KEY (experience_person_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Application"
    ADD FOREIGN KEY (application_owner_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Role_Person_Map"
    ADD FOREIGN KEY (role_id)
        REFERENCES census."Role" (role_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Role_Person_Map"
    ADD FOREIGN KEY (person_id)
        REFERENCES census."Person" (person_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Privilege_Application_Map"
    ADD FOREIGN KEY (privilege_id)
        REFERENCES census."Privilege" (privilege_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Privilege_Application_Map"
    ADD FOREIGN KEY (application_id)
        REFERENCES census."Application" (application_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Privilege_Role_Map"
    ADD FOREIGN KEY (privilege_id)
        REFERENCES census."Privilege" (privilege_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Privilege_Role_Map"
    ADD FOREIGN KEY (role_id)
        REFERENCES census."Role" (role_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE IF EXISTS census."Access_Token"
    ADD FOREIGN KEY (access_token_application_id)
        REFERENCES census."Application" (application_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;


ALTER TABLE IF EXISTS census."Refresh_Token"
    ADD FOREIGN KEY (refresh_token_application_id)
        REFERENCES census."Application" (application_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE;


-- Schema Security

CREATE SCHEMA IF NOT EXISTS census_security;

CREATE TABLE IF NOT EXISTS census_security."Ip_Trial_Log"
(
    ip_trial_log_address INET NOT NULL,
    ip_trial_log_count SMALLINT DEFAULT 0,
    PRIMARY KEY (ip_trial_log_address)
);

END;
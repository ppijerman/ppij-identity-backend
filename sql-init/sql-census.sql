-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Person"
(
    person_id uuid NOT NULL,
    name character varying(50) NOT NULL,
    birth_date date NOT NULL,
    birth_place character varying(20) NOT NULL,
    phone character varying(20) NOT NULL,
    email character varying(50) NOT NULL,
    password character varying(50) NOT NULL,
    uni_email character varying(50),
    status boolean,
    last_verified date,
    zipcode character varying(10) NOT NULL,
    street character varying(50),
    street_number character varying(5),
    city_id uuid,
    branch_id uuid,
    CONSTRAINT person_id PRIMARY KEY (person_id)
    );

ALTER TABLE IF EXISTS public."Person"
    ENABLE ROW LEVEL SECURITY;

CREATE TABLE IF NOT EXISTS public."City"
(
    city_id uuid NOT NULL,
    city_name character varying(50) NOT NULL,
    PRIMARY KEY (city_id)
    );

CREATE TABLE IF NOT EXISTS public."Branch"
(
    branch_id uuid NOT NULL,
    branch_name character varying(50) NOT NULL,
    email character varying(50) NOT NULL,
    leader uuid NOT NULL,
    phone character varying(50) NOT NULL,
    website character varying(50),
    facebook character varying(50),
    instagram character varying(50),
    twitter character varying(50),
    PRIMARY KEY (branch_id)
    );

CREATE TABLE IF NOT EXISTS public."Education"
(
    education_id uuid NOT NULL,
    start_date date NOT NULL,
    end_date date,
    person_id uuid NOT NULL,
    degree_id uuid NOT NULL,
    major_id uuid NOT NULL,
    funding_id uuid NOT NULL,
    institute_id uuid NOT NULL,
    PRIMARY KEY (education_id)
    );

CREATE TABLE IF NOT EXISTS public."Major"
(
    major_id uuid NOT NULL,
    major_name character varying(40) NOT NULL,
    PRIMARY KEY (major_id)
    );

CREATE TABLE IF NOT EXISTS public."Degree"
(
    degree_id uuid NOT NULL,
    degree character varying(50) NOT NULL,
    PRIMARY KEY (degree_id)
    );

CREATE TABLE IF NOT EXISTS public."Institute"
(
    institute_id uuid NOT NULL,
    institute_name character varying(50) NOT NULL,
    phone character varying(20),
    email character varying(50),
    zipcode character varying(10),
    street character varying(50),
    street_number character varying(5),
    city_id uuid,
    PRIMARY KEY (institute_id)
    );

CREATE TABLE IF NOT EXISTS public."Skill"
(
    skill_id uuid NOT NULL,
    person_id uuid NOT NULL,
    is_available boolean NOT NULL,
    category_id integer NOT NULL,
    PRIMARY KEY (skill_id)
    );

CREATE TABLE IF NOT EXISTS public."Experience"
(
    experience_id uuid NOT NULL,
    person_id uuid NOT NULL,
    experience_name character varying(50) NOT NULL,
    type_id uuid NOT NULL,
    category_id uuid NOT NULL,
    is_international boolean NOT NULL,
    start_date date NOT NULL,
    end_date date,
    PRIMARY KEY (experience_id)
    );

CREATE TABLE IF NOT EXISTS public."Application"
(
    application_id uuid NOT NULL,
    application_secret_key character varying(50) NOT NULL,
    application_owner_id uuid NOT NULL,
    application_name character varying(50) NOT NULL,
    application_description character varying(255) NOT NULL,
    creation_date date NOT NULL,
    PRIMARY KEY (application_id)
    );

CREATE TABLE IF NOT EXISTS public."Role_Person_Map"
(
    role_id uuid NOT NULL,
    person_id uuid NOT NULL
);

CREATE TABLE IF NOT EXISTS public."Category"
(
    category_id uuid NOT NULL,
    category_name character varying(50) NOT NULL,
    PRIMARY KEY (category_id)
    );

CREATE TABLE IF NOT EXISTS public."Experience_Type"
(
    experience_type_id uuid NOT NULL,
    experience_type_name character varying(50) NOT NULL,
    PRIMARY KEY (experience_type_id)
    );

CREATE TABLE IF NOT EXISTS public."Privilige_Application_Map"
(
    privilege_id uuid NOT NULL,
    application_id uuid
);

CREATE TABLE IF NOT EXISTS public."Role"
(
    role_id uuid NOT NULL,
    role_name character varying(20) NOT NULL,
    PRIMARY KEY (role_id)
    );

CREATE TABLE IF NOT EXISTS public."Privilege_Role_Map"
(
    privilege_id integer NOT NULL,
    role_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public."Privilige"
(
    privilege_id uuid NOT NULL,
    privilege_name character varying(20) NOT NULL,
    PRIMARY KEY (privilege_id)
    );

CREATE TABLE IF NOT EXISTS public."Access_Token"
(
    access_token character varying(64) NOT NULL,
    application_id uuid NOT NULL,
    expiration_time time without time zone NOT NULL,
    PRIMARY KEY (access_token)
    );

CREATE TABLE IF NOT EXISTS public."Refresh_Token"
(
    refresh_token character varying(64) NOT NULL,
    application_id uuid NOT NULL,
    expiration_time time without time zone NOT NULL,
    PRIMARY KEY (refresh_token)
    );

CREATE TABLE IF NOT EXISTS public."Funding"
(
    funding_id uuid NOT NULL,
    funding_type character varying NOT NULL,
    funding_name character varying NOT NULL,
    PRIMARY KEY (funding_id)
    );

ALTER TABLE IF EXISTS public."Person"
    ADD FOREIGN KEY (city_id)
    REFERENCES public."City" (city_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Person"
    ADD FOREIGN KEY (branch_id)
    REFERENCES public."Branch" (branch_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."City"
    ADD FOREIGN KEY (city_id)
    REFERENCES public."Institute" (city_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."City"
    ADD FOREIGN KEY (city_id)
    REFERENCES public."Person" (city_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Branch"
    ADD FOREIGN KEY (leader)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Education"
    ADD FOREIGN KEY (person_id)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Education"
    ADD FOREIGN KEY (degree_id)
    REFERENCES public."Degree" (degree_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Education"
    ADD FOREIGN KEY (major_id)
    REFERENCES public."Major" (major_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Education"
    ADD FOREIGN KEY (institute_id)
    REFERENCES public."Institute" (institute_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Education"
    ADD FOREIGN KEY (funding_id)
    REFERENCES public."Funding" (funding_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Education"
    ADD FOREIGN KEY (person_id)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Institute"
    ADD FOREIGN KEY (city_id)
    REFERENCES public."City" (city_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Skill"
    ADD FOREIGN KEY (category_id)
    REFERENCES public."Category" (category_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Skill"
    ADD FOREIGN KEY (person_id)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Experience"
    ADD FOREIGN KEY (category_id)
    REFERENCES public."Category" (category_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Experience"
    ADD FOREIGN KEY (type_id)
    REFERENCES public."Experience_Type" (experience_type_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Experience"
    ADD FOREIGN KEY (person_id)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Application"
    ADD FOREIGN KEY (application_owner_id)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Role_Person_Map"
    ADD FOREIGN KEY (role_id)
    REFERENCES public."Role" (role_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Role_Person_Map"
    ADD FOREIGN KEY (person_id)
    REFERENCES public."Person" (person_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Privilige_Application_Map"
    ADD FOREIGN KEY (privilege_id)
    REFERENCES public."Privilige" (privilege_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Privilige_Application_Map"
    ADD FOREIGN KEY (application_id)
    REFERENCES public."Application" (application_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Privilege_Role_Map"
    ADD FOREIGN KEY (privilege_id)
    REFERENCES public."Privilige" (privilege_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Privilege_Role_Map"
    ADD FOREIGN KEY (role_id)
    REFERENCES public."Role" (role_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Access_Token"
    ADD FOREIGN KEY (application_id)
    REFERENCES public."Application" (application_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."Refresh_Token"
    ADD FOREIGN KEY (application_id)
    REFERENCES public."Application" (application_id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE SET NULL
    NOT VALID;

END;